# This is meant for inclusion in other playbooks
---
    - name: Get my node ID
      set_fact:
        my_node_id: "{{ inventory_hostname.split('-')[1] }}"
      tags:
        - compute
        - always

    - name: create a list of node number
      set_fact:
        mystr: "{{ my_node_id|list }}"
      tags:
        - compute
        - always

    - name: Identify subnet from which hosts are assigned IPs for dual-attach
      set_fact:
        host_ip_base: |
          {% if (mystr[0]|int %2) == 1 %}
             {{ server_ip_base + mystr[0] + '.' + default_vlan|string }}
          {%else%}
             {{ server_ip_base + (mystr[0]|int -1)|string + '.' + default_vlan|string }}
          {%endif%}
      when: "{{ dual_attach_hosts }}"

    - name: Identify subnet from which hosts are assigned IPs for single-attach
      set_fact:
        host_ip_base: |
          {{ server_ip_base + mystr[0] + '.' + default_vlan|string }}
      when: "{{ not dual_attach_hosts }}"

    - name: construct my IP
      set_fact:
        host_ip_addr: |
          {{ "%s.%s"|format(host_ip_base.split()[0], my_node_id) }}
      tags:
        - compute
        - always

    - name: Construct GW IP for dual attach
      set_fact:
        my_gw_ip: |
          {{ "%s.254"|format(host_ip_base.split()[0]) }}
      when: "{{ dual_attach_hosts }}"

    - name: Construct GW IP for single-attach hosts
      set_fact:
        my_gw_ip: |
          {{ "%s.1"|format(host_ip_base.split()[0]) }}
      when: "{{ not dual_attach_hosts }}"

    - name: Assign IP to loopback
      blockinfile:
        dest: /etc/network/interfaces
        marker: "#{mark} loopback IP addr assignment"
        block: |
          auto lo:1
          iface lo:1 inet static
             address {{ host_ip_addr.split()[0]}}/32

      notify: Reload link config for hosts

    - name: Configure interfaces for BGP
      blockinfile:
        dest: /etc/network/interfaces
        marker: "#{mark} {{ item }} interfaces up"
        block: |
          auto {{ item }}
          iface {{ item }} inet manual

      when: "{{ (protocol == 'bgp') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') and (item != 'lo_1' ) }}"
      with_items: "{{ ansible_interfaces }}"
      notify: Reload link config for hosts

    - name: Configure interface for OSPF
      blockinfile:
        dest: /etc/network/interfaces
        marker: "#{mark} {{ item }} interfaces up"
        block: |
          auto {{ item }}
          iface {{ item }} inet static
             address {{ host_ip_addr.split()[0]}}/32

      when: "{{ (protocol == 'ospf') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') and (item != 'lo_1' ) }}"
      with_items: "{{ ansible_interfaces }}"
      notify: Reload link config for hosts

    - name: Install iproute2
      apt: name=iproute state=present update_cache=yes

    - name: Copy quagga deb
      copy: src=./quagga_0.99.23.1-1+cl3u1_trusty_amd64.deb dest=/home/vagrant/

    - name: Install quagga deb
      apt: deb="/home/vagrant/quagga_0.99.23.1-1+cl3u1_trusty_amd64.deb" state=present

    - name: Install sysctls needed for OSPF
      blockinfile:
        dest: /etc/sysctl.d/20-roh.conf
        create: yes
        block: |
          net.ipv4.conf.all.rp_filter=0
          net.ipv4.conf.default.rp_filter=0
          net.ipv4.conf.lo.rp_filter=0
      when: "{{ protocol == 'ospf' }}"
      notify: Set sysctls

    - name: Write daemons file for BGP
      blockinfile:
        dest: /etc/quagga/daemons
        create: yes
        block: |
           zebra=yes
           bgpd=yes

      become: yes  
      when: "{{ protocol == 'bgp' }}"
      notify: Restart quagga
      tags: routing

    - name: Write daemons file for OSPF
      blockinfile:
        dest: /etc/quagga/daemons
        create: yes
        block: |
           zebra=yes
           ospfd=yes

      become: yes
      when: "{{ protocol == 'ospf' }}"
      notify: Restart quagga
      tags: routing

    - name: Write base quagga config
      blockinfile:
        dest: /etc/quagga/Quagga.conf
        marker: "!{mark} base config ANSIBLE MANAGED BLOCK"
        create: yes
        block: |
          log file /var/log/quagga/quagga.log
          !
      notify: Restart quagga

    - name: Enable IPv6 RA on inband ports
      blockinfile:
        dest: /etc/quagga/Quagga.conf
        marker: "!{mark} {{ item }} config ANSIBLE MANAGED BLOCK"
        block: |
          interface {{ item }}
           no ipv6 nd suppress-ra
           ipv6 nd ra-interval 5
          !
      when: "{{ (protocol == 'bgp') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') and (item != 'lo_1' ) }}"
      with_items: "{{ ansible_interfaces }}"
      notify: Restart quagga

    - name: Write base BGP config
      blockinfile:
        dest: /etc/quagga/Quagga.conf
        marker: "!{mark} base bgp config ANSIBLE MANAGED BLOCK"
        create: yes
        block: |
          router bgp 65535
           bgp router-id {{ host_ip_addr.split()[0] }}
           neighbor TOR peer-group
           neighbor TOR remote-as external
           neighbor TOR capability extended-nexthop
           network {{ host_ip_addr.split()[0] }}/32

      when: "{{ (protocol == 'bgp')  }}"
      notify: Restart quagga

    - name: Write BGP interface config
      blockinfile:
        dest: /etc/quagga/Quagga.conf
        marker: "!{mark} {{item }} bgp interface config ANSIBLE MANAGED BLOCK"
        block: |
          neighbor {{ item }} interface peer-group TOR

      when: "{{ (protocol == 'bgp') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') and (item != 'lo_1' ) }}"
      with_items: "{{ ansible_interfaces }}"
      notify: Restart quagga

    - name: Write interface quagga config for OSPF
      blockinfile:
        dest: /etc/quagga/Quagga.conf
        marker: "!{mark} {{ item }} config ANSIBLE MANAGED BLOCK"
        create: yes
        block: |
          interface {{ item }}
            ip ospf network point-to-point
            ip ospf area 0.0.0.1
          !
      when: "{{ (protocol == 'ospf') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') }}"
      with_items: "{{ ansible_interfaces }}"
      notify: Restart quagga

    - name: Write base OSPF config
      blockinfile:
        dest: /etc/quagga/Quagga.conf
        marker: "!{mark} base ospf config ANSIBLE MANAGED BLOCK"
        create: yes
        block: |
          router ospf
            ospf router-id {{ host_ip_addr.split()[0] }}
            area 0.0.0.1 stub no-summary
            passive-interface lo

      when: "{{ protocol == 'ospf' }}"
      notify: Restart quagga
