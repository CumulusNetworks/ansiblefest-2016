# This is meant for inclusion in other playbooks
---
    - name: Get my node ID
      set_fact:
        my_node_id: "{{ inventory_hostname.split('-')[1] }}"
      tags:
        - compute
        - always

    - name: create a list of node number
      set_fact:
        mystr: "{{ my_node_id|list }}"
      tags:
        - compute
        - always

    - name: Identify subnet from which hosts are assigned IPs for dual-attach
      set_fact:
        host_ip_base: |
          {% if (mystr[0]|int %2) == 1 %}
             {{ server_ip_base + mystr[0] + '.' + default_vlan|string }}
          {%else%}
             {{ server_ip_base + (mystr[0]|int -1)|string + '.' + default_vlan|string }}
          {%endif%}
      when: "{{ dual_attach_hosts }}"

    - name: Identify subnet from which hosts are assigned IPs for single-attach
      set_fact:
        host_ip_base: |
          {{ server_ip_base + mystr[0] + '.' + default_vlan|string }}
      when: "{{ not dual_attach_hosts }}"

    - name: construct my IP
      set_fact:
        host_ip_addr: |
          {{ "%s.%s"|format(host_ip_base.split()[0], my_node_id) }}
      tags:
        - compute
        - always

    - name: Construct GW IP for dual attach
      set_fact:
        my_gw_ip: |
          {{ "%s.254"|format(host_ip_base.split()[0]) }}
      when: "{{ dual_attach_hosts }}"

    - name: Construct GW IP for single-attach hosts
      set_fact:
        my_gw_ip: |
          {{ "%s.1"|format(host_ip_base.split()[0]) }}
      when: "{{ not dual_attach_hosts }}"

    - name: Assign IP to loopback
      blockinfile:
        dest: /etc/network/interfaces
        marker: "#{mark} loopback IP addr assignment"
        block: |
          auto lo:1
          iface lo:1 inet static
             address {{ host_ip_addr.split()[0]}}/32

      notify: Reload link config for hosts

    - name: Configure interfaces for BGP
      blockinfile:
        dest: /etc/network/interfaces
        marker: "#{mark} {{ item }} interfaces up"
        block: |
          auto {{ item }}
          iface {{ item }} inet manual

      when: "{{ (protocol == 'bgp') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') and (item != 'lo_1' ) }}"
      with_items: "{{ ansible_interfaces }}"
      notify: Reload link config for hosts

    - name: Configure interface for OSPF
      blockinfile:
        dest: /etc/network/interfaces
        marker: "#{mark} {{ item }} interfaces up"
        block: |
          auto {{ item }}
          iface {{ item }} inet static
             address {{ host_ip_addr.split()[0]}}/32

      when: "{{ (protocol == 'ospf') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') and (item != 'lo_1' ) }}"
      with_items: "{{ ansible_interfaces }}"
      notify: Reload link config for hosts

    - name: Setup key for docker
      apt_key: keyserver=ha.pool.sks-keyservers.net id=58118E89F3A912897C070ADBF76221572C52609D
      become: yes

    - name: Add docker engine repo
      apt_repository: repo='deb [arch=amd64] https://apt.dockerproject.org/repo ubuntu-xenial experimental' update_cache=yes
      become: yes

    - name: Add docker
      apt: name=docker-engine state=present
      become: yes

    - name: Add user vagrant to docker group to allow non-sudo access
      user: name=vagrant append=yes groups=docker
      become: yes

    - name: Verify installed docker is right version
      command: curl --unix-socket /var/run/docker.sock http:/info
      register: docker_version

    - assert: { that: "(docker_version.stdout|from_json)['ExperimentalBuild'] == true" }

    - assert: { that: "(docker_version.stdout|from_json)['ServerVersion']|match('1.12') == true" }

    - name: Enable default arp_notify sysctl
      sysctl: name=net.ipv4.conf.all.arp_notify value=1 sysctl_file=/etc/sysctl.d/docker.conf reload=yes
      become: yes

    - name: Enable all arp_notify sysctl
      sysctl: name=net.ipv4.conf.default.arp_notify value=1 sysctl_file=/etc/sysctl.d/docker.conf reload=yes
      become: yes

    - name: Enable arp_notify for every interface
      sysctl: name=net.ipv4.conf.{{ item }}.arp_notify value=1 sysctl_file=/etc/sysctl.d/docker.conf reload=yes
      with_items: "{{ ansible_interfaces }}"
      when: "{{ (item != 'lo') and (item != 'lo_1' ) }}"
      ignore_errors: yes
      become: yes

    - name: Identify subnet from which docker bridge IP is assigned
      set_fact:
        docker_bip: |
          {% if (mystr[0]|int %2) == 1 %}
          {{ docker_ip_base + mystr[0] + '.1/24'  }}
          {%else%}
          {{ docker_ip_base + (mystr[0]|int -1)|string + '.1/24' }}
          {%endif%}

      when: "{{ dual_attach_hosts }}"

    - name: Identify subnet from which hosts are assigned IPs for single-attach
      set_fact:
        docker_bip: |
          {{ docker_ip_base + mystr[0] + '.1/24' }}

      when: "{{ not dual_attach_hosts }}"

    - name: Create dir for docker startup customization
      file: path=/etc/systemd/system/docker.service.d/ state=directory mode=0755
      become: yes

    - name: Fixup docker to not do NAT
      blockinfile:
        dest: /etc/systemd/system/docker.service.d/noiptables.conf
        create: yes
        block: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/docker daemon -H fd:// --iptables=false --ip-masq=false --ip-forward=true --bip={{ docker_bip }}

      become: yes

    - name: Reload systemd config
      command: systemctl daemon-reload
      become: yes

    - name: Stop docker service
      service: name=docker state=stopped
      become: yes

    - name: Cleanup IP tables NAT rules set by docker
      command: iptables -F -t nat
      become: yes

    - name: Cleanup IP tables filter rules set by docker
      command: iptables -F -t filter
      become: yes

    - name: Restart docker
      service: name=docker state=started
      become: yes


### start the container

    - name: Download the alpine container for later use
      command: docker pull alpine

    - name: Create The Quagga Docker Container
      command: docker run -itd --net=host --privileged=true --name=quagga_docker cumulusnetworks/quagga:xenial-latest
      ignore_errors: yes

    - name: start docker containers (in case not running)
      command: docker start quagga_docker
      ignore_errors: yes

    - name: Install sysctls needed for OSPF
      blockinfile:
        dest: /etc/sysctl.d/20-roh.conf
        create: yes
        block: |
          net.ipv4.conf.all.rp_filter=0
          net.ipv4.conf.default.rp_filter=0
          net.ipv4.conf.lo.rp_filter=0
      when: "{{ protocol == 'ospf' }}"
      notify: Set sysctls

    - name: Remove any existing config file
      file: name=/tmp/Quagga.conf state=absent

    - name: Write base quagga config
      blockinfile:
        dest: /tmp/Quagga.conf
        marker: "!{mark} base config ANSIBLE MANAGED BLOCK"
        create: yes
        block: |
          log file /var/log/quagga/quagga.log
          !

    - name: Enable IPv6 RA on inband ports
      blockinfile:
        dest: /tmp/Quagga.conf
        marker: "!{mark} {{ item }} config ANSIBLE MANAGED BLOCK"
        block: |
          interface {{ item }}
           no ipv6 nd suppress-ra
           ipv6 nd ra-interval 5
          !
      when: "{{ (protocol == 'bgp') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') and (item != 'lo_1' ) }}"
      with_items: "{{ ansible_interfaces }}"

    - name: Write base BGP config
      blockinfile:
        dest: /tmp/Quagga.conf
        marker: "!{mark} base bgp config ANSIBLE MANAGED BLOCK"
        create: yes
        block: |
          route-map DOCKER permit 10
           match interface docker0
          !
          router bgp 65535
           bgp router-id {{ host_ip_addr.split()[0] }}
           bgp bestpath as-path multipath-relax
           neighbor TOR peer-group
           neighbor TOR remote-as external
           neighbor TOR capability extended-nexthop
           redistribute connected route-map DOCKER
           network {{ host_ip_addr.split()[0] }}/32

      when: "{{ (protocol == 'bgp')  }}"

    - name: Write BGP interface config
      blockinfile:
        dest: /tmp/Quagga.conf
        marker: "!{mark} {{item }} bgp interface config ANSIBLE MANAGED BLOCK"
        block: |
          neighbor {{ item }} interface peer-group TOR

      when: "{{ (protocol == 'bgp') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') and (item != 'lo_1') and (item != 'docker0') }}"
      with_items: "{{ ansible_interfaces }}"

    - name: Write interface quagga config for OSPF
      blockinfile:
        dest: /tmp/Quagga.conf
        marker: "!{mark} {{ item }} config ANSIBLE MANAGED BLOCK"
        create: yes
        block: |
          interface {{ item }}
            ip ospf network point-to-point
            ip ospf area 0.0.0.1
          !
      when: "{{ (protocol == 'ospf') and
                (item != ansible_default_ipv4.interface) and
                (item != 'lo') }}"
      with_items: "{{ ansible_interfaces }}"

    - name: Write base OSPF config
      blockinfile:
        dest: /tmp/Quagga.conf
        marker: "!{mark} base ospf config ANSIBLE MANAGED BLOCK"
        create: yes
        block: |
          router ospf
            ospf router-id {{ host_ip_addr.split()[0] }}
            area 0.0.0.1 stub no-summary
            passive-interface lo

      when: "{{ protocol == 'ospf' }}"

    - name: Copy Quagga Configuration to Container
      command: docker cp /tmp/Quagga.conf quagga_docker:/etc/quagga/Quagga.conf

    - name: Restart Quagga on Container
      command: docker exec quagga_docker /usr/lib/quagga/quagga start

    - name: Delete default route added by eth0 DHCP
      command: ip route del default
      become: yes
